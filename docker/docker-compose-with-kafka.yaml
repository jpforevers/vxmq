name: vxmq-kafka
services:
  vxmq-kafka:
    image: "bitnami/kafka:3.5"
    container_name: vxmq-kafka
    restart: always
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 3s
      retries: 5
    environment:
      # 参考https://hub.docker.com/r/bitnami/kafka和kafka安装包下的config/kraft/server.properties文
      KAFKA_KRAFT_CLUSTER_ID: CUdCzB0ESI2PBqkT5Z1IbA
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@vxmq-kafka:9093
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://vxmq-kafka:9092,EXTERNAL://192.168.16.197:9094
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka-volume:/bitnami/kafka
    networks:
      - vxmq

  vxmq-vxmq1:
    image: "jpforevers/vxmq:latest"
    container_name: vxmq-vxmq1
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:8060/q/health | jq -e '.status == \"UP\"'" ]
      interval: 30s
      timeout: 3s
      retries: 5
    environment:
      VXMQ_RULE_STATIC_WRITEMQTTEVENTTOKAFKA_ENABLE: true
      VXMQ_RULE_STATIC_WRITEMQTTEVENTTOKAFKA_KAFKA_SERVERS: vxmq-kafka:9092
      VXMQ_RULE_STATIC_READMQTTPUBLISHFROMKAFKA_ENABLE: true
      VXMQ_RULE_STATIC_READMQTTPUBLISHFROMKAFKA_KAFKA_SERVERS: vxmq-kafka:9092
      VXMQ_METRICS_ENABLE: true
#      VXMQ_LOGS_LEVEL: DEBUG
      VXMQ_MQTT_SERVER_PROXY_PROTOCOL_ENABLE: true
    networks:
      - vxmq
    depends_on:
      vxmq-kafka:
        condition: service_healthy

  vxmq-vxmq2:
    image: "jpforevers/vxmq:latest"
    container_name: vxmq-vxmq2
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:8060/q/health | jq -e '.status == \"UP\"'" ]
      interval: 30s
      timeout: 3s
      retries: 5
    environment:
      VXMQ_RULE_STATIC_WRITEMQTTEVENTTOKAFKA_ENABLE: true
      VXMQ_RULE_STATIC_WRITEMQTTEVENTTOKAFKA_KAFKA_SERVERS: vxmq-kafka:9092
      VXMQ_RULE_STATIC_READMQTTPUBLISHFROMKAFKA_ENABLE: true
      VXMQ_RULE_STATIC_READMQTTPUBLISHFROMKAFKA_KAFKA_SERVERS: vxmq-kafka:9092
      VXMQ_METRICS_ENABLE: true
      #      VXMQ_LOGS_LEVEL: DEBUG
      VXMQ_MQTT_SERVER_PROXY_PROTOCOL_ENABLE: true
    networks:
      - vxmq
    depends_on:
      vxmq-kafka:
        condition: service_healthy

  vxmq-vxmq3:
    image: "jpforevers/vxmq:latest"
    container_name: vxmq-vxmq3
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:8060/q/health | jq -e '.status == \"UP\"'" ]
      interval: 30s
      timeout: 3s
      retries: 5
    environment:
      VXMQ_RULE_STATIC_WRITEMQTTEVENTTOKAFKA_ENABLE: true
      VXMQ_RULE_STATIC_WRITEMQTTEVENTTOKAFKA_KAFKA_SERVERS: vxmq-kafka:9092
      VXMQ_RULE_STATIC_READMQTTPUBLISHFROMKAFKA_ENABLE: true
      VXMQ_RULE_STATIC_READMQTTPUBLISHFROMKAFKA_KAFKA_SERVERS: vxmq-kafka:9092
      VXMQ_METRICS_ENABLE: true
      #      VXMQ_LOGS_LEVEL: DEBUG
      VXMQ_MQTT_SERVER_PROXY_PROTOCOL_ENABLE: true
    networks:
      - vxmq
    depends_on:
      vxmq-kafka:
        condition: service_healthy

  vxmq-haproxy:
    image: "haproxy:2.8"
    container_name: vxmq-haproxy
    restart: always
    healthcheck:
      test: [ "CMD", "haproxy", "-c", "-f", "/usr/local/etc/haproxy/haproxy.cfg" ]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "9999:9999"
      - "9094:9094"
      - "1883:1883"
      - "8060:8060"
    volumes:
      - ./haproxy-with-kafka.cfg:/usr/local/etc/haproxy/haproxy.cfg
    networks:
      - vxmq
    depends_on:
      vxmq-kafka:
        condition: service_healthy
      vxmq-vxmq1:
        condition: service_healthy
      vxmq-vxmq2:
        condition: service_healthy
      vxmq-vxmq3:
        condition: service_healthy

volumes:
  kafka-volume:

networks:
  vxmq:
